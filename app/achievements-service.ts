// services/achievements-service.ts
export interface Achievement {
  id: string;
  title: string;
  description: string;
  icon: string;
  unlocked: boolean;
  unlockedAt?: Date;
  type: 'sleep' | 'water' | 'mood' | 'workout' | 'streak' | 'milestone' | 'nutrition';
  condition: number;
  category: 'health' | 'fitness' | 'mind' | 'dedication' | 'special';
  rarity: 'common' | 'rare' | 'epic' | 'legendary';
}

class AchievementsService {
  private achievements: Achievement[] = [
    // === –ó–î–û–†–û–í–¨–ï ===
    {
      id: 'first_sleep',
      title: '–•–æ—Ä–æ—à–∏–π —Å–æ–Ω',
      description: '–í–ø–µ—Ä–≤—ã–µ –ø—Ä–æ—Å–ø–∞–ª–∏ 8 —á–∞—Å–æ–≤',
      icon: 'üåô',
      unlocked: false,
      type: 'sleep',
      condition: 8,
      category: 'health',
      rarity: 'common'
    },
    {
      id: 'first_water',
      title: '–í–æ–¥–æ—Ö–ª—ë–±',
      description: '–í–ø–µ—Ä–≤—ã–µ –≤—ã–ø–∏–ª–∏ 2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –∑–∞ –¥–µ–Ω—å',
      icon: 'üíß',
      unlocked: false,
      type: 'water',
      condition: 2000,
      category: 'health',
      rarity: 'common'
    },
    {
      id: 'perfect_week_sleep',
      title: '–í—ã—Å—ã–ø–∞—é—â–∞—è—Å—è –Ω–µ–¥–µ–ª—è',
      description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å–ø–∞–ª–∏ 7+ —á–∞—Å–æ–≤',
      icon: '‚≠ê',
      unlocked: false,
      type: 'sleep',
      condition: 7,
      category: 'health',
      rarity: 'rare'
    },
    {
      id: 'hydration_master',
      title: '–ú–∞—Å—Ç–µ—Ä –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏',
      description: '5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –ø–∏–ª–∏ 2+ –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã',
      icon: 'üèÜ',
      unlocked: false,
      type: 'water',
      condition: 5,
      category: 'health',
      rarity: 'rare'
    },
    {
      id: 'sleep_expert',
      title: '–≠–∫—Å–ø–µ—Ä—Ç —Å–Ω–∞',
      description: '100 —á–∞—Å–æ–≤ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–Ω–∞',
      icon: 'üò¥',
      unlocked: false,
      type: 'sleep',
      condition: 100,
      category: 'health',
      rarity: 'epic'
    },
    {
      id: 'water_expert',
      title: '–í–æ–¥–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç',
      description: '–í—ã–ø–∏–ª–∏ 100 –ª–∏—Ç—Ä–æ–≤ –≤–æ–¥—ã',
      icon: 'üåä',
      unlocked: false,
      type: 'water',
      condition: 100,
      category: 'health',
      rarity: 'epic'
    },
    {
      id: 'sleep_marathon',
      title: '–ú–∞—Ä–∞—Ñ–æ–Ω —Å–Ω–∞',
      description: '30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º —Å–Ω–∞',
      icon: 'üåõ',
      unlocked: false,
      type: 'sleep',
      condition: 30,
      category: 'health',
      rarity: 'legendary'
    },

    // === –§–ò–¢–ù–ï–° ===
    {
      id: 'first_workout',
      title: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ä—Ç',
      description: '–ó–∞–≤–µ—Ä—à–∏–ª–∏ –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
      icon: 'üí™',
      unlocked: false,
      type: 'workout',
      condition: 1,
      category: 'fitness',
      rarity: 'common'
    },
    {
      id: 'weekly_goal',
      title: '–ê–∫—Ç–∏–≤–Ω–∞—è –Ω–µ–¥–µ–ª—è',
      description: '–í—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–µ–¥–µ–ª—å–Ω—É—é –Ω–æ—Ä–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (150 –º–∏–Ω—É—Ç)',
      icon: 'üöÄ',
      unlocked: false,
      type: 'workout',
      condition: 150,
      category: 'fitness',
      rarity: 'common'
    },
    {
      id: 'marathon',
      title: '–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü',
      description: '–ü—Ä–æ–±–µ–∂–∞–ª–∏ 50+ –∫–º –≤ —Å—É–º–º–µ',
      icon: 'üèÉ‚Äç‚ôÇÔ∏è',
      unlocked: false,
      type: 'workout',
      condition: 50,
      category: 'fitness',
      rarity: 'rare'
    },
    {
      id: 'streak_7',
      title: '–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å',
      description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏',
      icon: 'üî•',
      unlocked: false,
      type: 'workout',
      condition: 7,
      category: 'fitness',
      rarity: 'rare'
    },
    {
      id: 'iron_man',
      title: '–ñ–µ–ª–µ–∑–Ω—ã–π —á–µ–ª–æ–≤–µ–∫',
      description: '10 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
      icon: 'ü¶æ',
      unlocked: false,
      type: 'workout',
      condition: 10,
      category: 'fitness',
      rarity: 'epic'
    },
    {
      id: 'fitness_pro',
      title: '–§–∏—Ç–Ω–µ—Å-–ø—Ä–æ—Ñ–∏',
      description: '100 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
      icon: 'üèÖ',
      unlocked: false,
      type: 'workout',
      condition: 100,
      category: 'fitness',
      rarity: 'epic'
    },
    {
      id: 'early_bird',
      title: '–†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞',
      description: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–æ 7 —É—Ç—Ä–∞',
      icon: 'üåÖ',
      unlocked: false,
      type: 'workout',
      condition: 1,
      category: 'fitness',
      rarity: 'rare'
    },
    {
      id: 'night_owl',
      title: '–ù–æ—á–Ω–∞—è —Å–æ–≤–∞',
      description: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø–æ—Å–ª–µ 10 –≤–µ—á–µ—Ä–∞',
      icon: 'üåÉ',
      unlocked: false,
      type: 'workout',
      condition: 1,
      category: 'fitness',
      rarity: 'rare'
    },

    // === –†–ê–ó–£–ú –ò –ù–ê–°–¢–†–û–ï–ù–ò–ï ===
    {
      id: 'first_mood',
      title: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç',
      description: '–í–ø–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∞–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
      icon: 'üòä',
      unlocked: false,
      type: 'mood',
      condition: 1,
      category: 'mind',
      rarity: 'common'
    },
    {
      id: 'positive_week',
      title: '–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è –Ω–µ–¥–µ–ª—è',
      description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º 4+ –∏–∑ 5',
      icon: 'üåà',
      unlocked: false,
      type: 'mood',
      condition: 7,
      category: 'mind',
      rarity: 'rare'
    },
    {
      id: 'mindful_month',
      title: '–û—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü',
      description: '30 –¥–Ω–µ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
      icon: 'üß†',
      unlocked: false,
      type: 'mood',
      condition: 30,
      category: 'mind',
      rarity: 'epic'
    },
    {
      id: 'happy_day',
      title: '–î–µ–Ω—å —Å—á–∞—Å—Ç—å—è',
      description: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ 5/5 –≤–µ—Å—å –¥–µ–Ω—å',
      icon: 'üòç',
      unlocked: false,
      type: 'mood',
      condition: 5,
      category: 'mind',
      rarity: 'common'
    },
    {
      id: 'emotional_explorer',
      title: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å —ç–º–æ—Ü–∏–π',
      description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ 5 —É—Ä–æ–≤–Ω–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
      icon: 'üé≠',
      unlocked: false,
      type: 'mood',
      condition: 5,
      category: 'mind',
      rarity: 'rare'
    },
    {
      id: 'zen_master',
      title: '–ú–∞—Å—Ç–µ—Ä –¥–∑–µ–Ω',
      description: '50 –¥–Ω–µ–π –º–µ–¥–∏—Ç–∞—Ü–∏–∏/–π–æ–≥–∏',
      icon: '‚òØÔ∏è',
      unlocked: false,
      type: 'workout',
      condition: 50,
      category: 'mind',
      rarity: 'epic'
    },
    {
  id: 'first_nutrition',
  title: '–ü–∏—â–µ–≤–æ–π –¥–µ—Ç–µ–∫—Ç–∏–≤',
  description: '–í–ø–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∞–ª–∏ –ø—Ä–∏–µ–º –ø–∏—â–∏',
  icon: 'üçΩÔ∏è',
  unlocked: false,
  type: 'nutrition',
  condition: 1,
  category: 'health',
  rarity: 'common'
},
{
  id: 'balanced_day',
  title: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–Ω—å',
  description: '–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ü–µ–ª–∏ ¬±10%',
  icon: '‚öñÔ∏è',
  unlocked: false,
  type: 'nutrition',
  condition: 1,
  category: 'health',
  rarity: 'rare'
},
{
  id: 'protein_pro',
  title: '–ë–µ–ª–∫–æ–≤—ã–π –ø—Ä–æ—Ñ–∏',
  description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –≤—ã–ø–æ–ª–Ω—è–ª–∏ –Ω–æ—Ä–º—É –ø–æ –±–µ–ª–∫–∞–º',
  icon: 'ü•©',
  unlocked: false,
  type: 'nutrition',
  condition: 7,
  category: 'health',
  rarity: 'epic'
},
{
  id: 'meal_prep_master',
  title: '–ú–∞—Å—Ç–µ—Ä –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è',
  description: '–ó–∞–ø–∏—Å–∞–ª–∏ 100 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤',
  icon: 'üë®‚Äçüç≥',
  unlocked: false,
  type: 'nutrition',
  condition: 100,
  category: 'health',
  rarity: 'legendary'
},

    

    // === –ü–†–ï–î–ê–ù–ù–û–°–¢–¨ –ò –°–¢–†–ò–ö–ò ===
    {
      id: 'week_streak',
      title: '–ù–µ–¥–µ–ª—è –ø—Ä–∏–≤—ã—á–∫–∏',
      description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
      icon: 'üìÖ',
      unlocked: false,
      type: 'streak',
      condition: 7,
      category: 'dedication',
      rarity: 'common'
    },
    {
      id: 'month_streak',
      title: '–ú–µ—Å—è—Ü –ø—Ä–∏–≤—ã—á–∫–∏',
      description: '30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
      icon: 'üìÜ',
      unlocked: false,
      type: 'streak',
      condition: 30,
      category: 'dedication',
      rarity: 'rare'
    },
    {
      id: 'triple_streak',
      title: '–¢—Ä–æ–π–Ω–∞—è —É–≥—Ä–æ–∑–∞',
      description: '–¢—Ä–µ–∫–∫–∏–Ω–≥ —Å–Ω–∞, –≤–æ–¥—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
      icon: 'üéØ',
      unlocked: false,
      type: 'streak',
      condition: 7,
      category: 'dedication',
      rarity: 'epic'
    },
    {
      id: 'perfect_day',
      title: '–ò–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å',
      description: '–°–æ–Ω 8—á + –≤–æ–¥–∞ 2–ª + —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ + –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ 4+',
      icon: 'üëë',
      unlocked: false,
      type: 'streak',
      condition: 1,
      category: 'dedication',
      rarity: 'legendary'
    },
    {
      id: 'health_guru',
      title: '–ì—É—Ä—É –∑–¥–æ—Ä–æ–≤—å—è',
      description: '100 –¥–Ω–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
      icon: 'üéì',
      unlocked: false,
      type: 'streak',
      condition: 100,
      category: 'dedication',
      rarity: 'legendary'
    },

    // === –û–°–û–ë–´–ï –î–û–°–¢–ò–ñ–ï–ù–ò–Ø ===
    {
      id: 'first_achievement',
      title: '–ü–µ—Ä–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
      description: '–ü–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ',
      icon: 'üéâ',
      unlocked: false,
      type: 'milestone',
      condition: 1,
      category: 'special',
      rarity: 'common'
    },
    {
      id: 'halfway_there',
      title: '–ù–∞ –ø–æ–ª–ø—É—Ç–∏',
      description: '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ 50% –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π',
      icon: 'üé™',
      unlocked: false,
      type: 'milestone',
      condition: 50,
      category: 'special',
      rarity: 'epic'
    },
    {
      id: 'completionist',
      title: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ–ª—å',
      description: '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
      icon: 'üèÜ',
      unlocked: false,
      type: 'milestone',
      condition: 100,
      category: 'special',
      rarity: 'legendary'
    },
    {
      id: 'weekend_warrior',
      title: '–í–æ–∏—Ç–µ–ª—å –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è',
      description: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Ç–æ–ª—å–∫–æ –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º 4 –Ω–µ–¥–µ–ª–∏ –ø–æ–¥—Ä—è–¥',
      icon: 'üé™',
      unlocked: false,
      type: 'workout',
      condition: 4,
      category: 'special',
      rarity: 'rare'
    },
    {
      id: 'four_seasons',
      title: '–ß–µ—Ç—ã—Ä–µ —Å–µ–∑–æ–Ω–∞',
      description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è 90 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
      icon: 'üçÇ',
      unlocked: false,
      type: 'streak',
      condition: 90,
      category: 'special',
      rarity: 'legendary'
    },
    {
      id: 'early_adopter',
      title: '–†–∞–Ω–Ω–∏–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
      description: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è',
      icon: 'üöÄ',
      unlocked: false,
      type: 'milestone',
      condition: 1,
      category: 'special',
      rarity: 'legendary'
    }
  ];

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–∑ AsyncStorage
  async loadAchievements(): Promise<Achievement[]> {
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ AsyncStorage
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      return [...this.achievements];
    } catch (error) {
      console.error('Error loading achievements:', error);
      return [...this.achievements];
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ AsyncStorage
  async saveAchievements(achievements: Achievement[]): Promise<void> {
    try {
      this.achievements = achievements;
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ AsyncStorage
    } catch (error) {
      console.error('Error saving achievements:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π

  checkSleepAchievement(sleepHours: number, totalSleepHours: number, sleepDays: number, achievements: Achievement[]): Achievement[] {
    return achievements.map(achievement => {
      if (achievement.type === 'sleep' && !achievement.unlocked) {
        let shouldUnlock = false;
        
        switch (achievement.id) {
          case 'first_sleep':
            shouldUnlock = sleepHours >= achievement.condition;
            break;
          case 'perfect_week_sleep':
            shouldUnlock = sleepDays >= achievement.condition;
            break;
          case 'sleep_expert':
            shouldUnlock = totalSleepHours >= achievement.condition;
            break;
          default:
            shouldUnlock = false;
        }
        
        if (shouldUnlock) {
          return {
            ...achievement,
            unlocked: true,
            unlockedAt: new Date()
          };
        }
      }
      return achievement;
    });
  }

  checkWaterAchievement(waterAmount: number, totalWater: number, waterDays: number, achievements: Achievement[]): Achievement[] {
    return achievements.map(achievement => {
      if (achievement.type === 'water' && !achievement.unlocked) {
        let shouldUnlock = false;
        
        switch (achievement.id) {
          case 'first_water':
            shouldUnlock = waterAmount >= achievement.condition;
            break;
          case 'hydration_master':
            shouldUnlock = waterDays >= achievement.condition;
            break;
          case 'water_expert':
            shouldUnlock = totalWater >= achievement.condition;
            break;
          default:
            shouldUnlock = false;
        }
        
        if (shouldUnlock) {
          return {
            ...achievement,
            unlocked: true,
            unlockedAt: new Date()
          };
        }
      }
      return achievement;
    });
  }

  checkMoodAchievement(moodLevel: number, moodDays: number, totalMoodEntries: number, achievements: Achievement[]): Achievement[] {
    return achievements.map(achievement => {
      if (achievement.type === 'mood' && !achievement.unlocked) {
        let shouldUnlock = false;
        
        switch (achievement.id) {
          case 'first_mood':
            shouldUnlock = moodLevel > 0;
            break;
          case 'happy_day':
            shouldUnlock = moodLevel >= achievement.condition;
            break;
          case 'positive_week':
            shouldUnlock = moodDays >= achievement.condition;
            break;
          case 'mindful_month':
            shouldUnlock = totalMoodEntries >= achievement.condition;
            break;
          default:
            shouldUnlock = false;
        }
        
        if (shouldUnlock) {
          return {
            ...achievement,
            unlocked: true,
            unlockedAt: new Date()
          };
        }
      }
      return achievement;
    });
  }

  checkWorkoutAchievement(totalWorkouts: number, weeklyMinutes: number, workoutTypes: number, achievements: Achievement[]): Achievement[] {
    return achievements.map(achievement => {
      if (achievement.type === 'workout' && !achievement.unlocked) {
        let shouldUnlock = false;
        
        switch (achievement.id) {
          case 'first_workout':
            shouldUnlock = totalWorkouts >= achievement.condition;
            break;
          case 'weekly_goal':
            shouldUnlock = weeklyMinutes >= achievement.condition;
            break;
          case 'fitness_pro':
            shouldUnlock = totalWorkouts >= achievement.condition;
            break;
          case 'iron_man':
            shouldUnlock = workoutTypes >= achievement.condition;
            break;
          default:
            shouldUnlock = false;
        }
        
        if (shouldUnlock) {
          return {
            ...achievement,
            unlocked: true,
            unlockedAt: new Date()
          };
        }
      }
      return achievement;
    });
  }

  checkStreakAchievement(appDays: number, tripleStreakDays: number, achievements: Achievement[]): Achievement[] {
    return achievements.map(achievement => {
      if (achievement.type === 'streak' && !achievement.unlocked) {
        let shouldUnlock = false;
        
        switch (achievement.id) {
          case 'week_streak':
            shouldUnlock = appDays >= achievement.condition;
            break;
          case 'month_streak':
            shouldUnlock = appDays >= achievement.condition;
            break;
          case 'triple_streak':
            shouldUnlock = tripleStreakDays >= achievement.condition;
            break;
          case 'health_guru':
            shouldUnlock = appDays >= achievement.condition;
            break;
          default:
            shouldUnlock = false;
        }
        
        if (shouldUnlock) {
          return {
            ...achievement,
            unlocked: true,
            unlockedAt: new Date()
          };
        }
      }
      return achievement;
    });
  }

  checkMilestoneAchievement(unlockedCount: number, totalCount: number, achievements: Achievement[]): Achievement[] {
    return achievements.map(achievement => {
      if (achievement.type === 'milestone' && !achievement.unlocked) {
        let shouldUnlock = false;
        
        switch (achievement.id) {
          case 'first_achievement':
            shouldUnlock = unlockedCount >= achievement.condition;
            break;
          case 'halfway_there':
            const progress = (unlockedCount / totalCount) * 100;
            shouldUnlock = progress >= achievement.condition;
            break;
          case 'completionist':
            shouldUnlock = unlockedCount >= totalCount;
            break;
          default:
            shouldUnlock = false;
        }
        
        if (shouldUnlock) {
          return {
            ...achievement,
            unlocked: true,
            unlockedAt: new Date()
          };
        }
      }
      return achievement;
    });
  }

  getAchievements(): Achievement[] {
    return [...this.achievements];
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  getAchievementsByCategory(category: string): Achievement[] {
    return this.achievements.filter(achievement => achievement.category === category);
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ —Ä–µ–¥–∫–æ—Å—Ç–∏
  getAchievementsByRarity(rarity: string): Achievement[] {
    return this.achievements.filter(achievement => achievement.rarity === rarity);
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏
  getRarityColor(rarity: string): string {
    switch (rarity) {
      case 'common': return '#6B7280';
      case 'rare': return '#3B82F6';
      case 'epic': return '#8B5CF6';
      case 'legendary': return '#F59E0B';
      default: return '#6B7280';
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
  getRarityName(rarity: string): string {
    switch (rarity) {
      case 'common': return '–û–±—ã—á–Ω–æ–µ';
      case 'rare': return '–†–µ–¥–∫–æ–µ';
      case 'epic': return '–≠–ø–∏—á–µ—Å–∫–æ–µ';
      case 'legendary': return '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ';
      default: return '–û–±—ã—á–Ω–æ–µ';
    }
  }

  // –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  async resetAchievements(): Promise<Achievement[]> {
    const resetAchievements = this.achievements.map(achievement => ({
      ...achievement,
      unlocked: false,
      unlockedAt: undefined
    }));
    await this.saveAchievements(resetAchievements);
    return resetAchievements;
  }
}

export const achievementsService = new AchievementsService();