// services/achievements-service.ts
export interface Achievement {
  id: string;
  title: string;
  description: string;
  icon: string;
  unlocked: boolean;
  unlockedAt?: Date;
  type: 'sleep' | 'water' | 'mood' | 'workout';
  condition: number;
  category: 'health' | 'fitness' | 'mind';
}

class AchievementsService {
  private achievements: Achievement[] = [
    // –ó–¥–æ—Ä–æ–≤—å–µ
    {
      id: 'first_sleep',
      title: '–•–æ—Ä–æ—à–∏–π —Å–æ–Ω',
      description: '–í–ø–µ—Ä–≤—ã–µ –ø—Ä–æ—Å–ø–∞–ª–∏ 8 —á–∞—Å–æ–≤',
      icon: 'üåô',
      unlocked: false,
      type: 'sleep',
      condition: 8,
      category: 'health'
    },
    {
      id: 'first_water',
      title: '–í–æ–¥–æ—Ö–ª—ë–±',
      description: '–í–ø–µ—Ä–≤—ã–µ –≤—ã–ø–∏–ª–∏ 2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –∑–∞ –¥–µ–Ω—å',
      icon: 'üíß',
      unlocked: false,
      type: 'water',
      condition: 2000,
      category: 'health'
    },
    {
      id: 'perfect_week_sleep',
      title: '–í—ã—Å—ã–ø–∞—é—â–∞—è—Å—è –Ω–µ–¥–µ–ª—è',
      description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å–ø–∞–ª–∏ 7+ —á–∞—Å–æ–≤',
      icon: '‚≠ê',
      unlocked: false,
      type: 'sleep',
      condition: 7,
      category: 'health'
    },
    {
      id: 'hydration_master',
      title: '–ú–∞—Å—Ç–µ—Ä –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏',
      description: '5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –ø–∏–ª–∏ 2+ –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã',
      icon: 'üèÜ',
      unlocked: false,
      type: 'water',
      condition: 5,
      category: 'health'
    },

    // –§–∏—Ç–Ω–µ—Å
    {
      id: 'first_workout',
      title: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ä—Ç',
      description: '–ó–∞–≤–µ—Ä—à–∏–ª–∏ –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
      icon: 'üí™',
      unlocked: false,
      type: 'workout',
      condition: 1,
      category: 'fitness'
    },
    {
      id: 'weekly_goal',
      title: '–ê–∫—Ç–∏–≤–Ω–∞—è –Ω–µ–¥–µ–ª—è',
      description: '–í—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–µ–¥–µ–ª—å–Ω—É—é –Ω–æ—Ä–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (150 –º–∏–Ω—É—Ç)',
      icon: 'üöÄ',
      unlocked: false,
      type: 'workout',
      condition: 150,
      category: 'fitness'
    },
    {
      id: 'marathon',
      title: '–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü',
      description: '–ü—Ä–æ–±–µ–∂–∞–ª–∏ 50+ –∫–º –≤ —Å—É–º–º–µ',
      icon: 'üèÉ‚Äç‚ôÇÔ∏è',
      unlocked: false,
      type: 'workout',
      condition: 50,
      category: 'fitness'
    },
    {
      id: 'streak_7',
      title: '–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ—Å—Ç—å',
      description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏',
      icon: 'üî•',
      unlocked: false,
      type: 'workout',
      condition: 7,
      category: 'fitness'
    },

    // –ú–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
    {
      id: 'first_mood',
      title: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç',
      description: '–í–ø–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∞–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
      icon: 'üòä',
      unlocked: false,
      type: 'mood',
      condition: 1,
      category: 'mind'
    },
    {
      id: 'positive_week',
      title: '–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è –Ω–µ–¥–µ–ª—è',
      description: '7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º 4+ –∏–∑ 5',
      icon: 'üåà',
      unlocked: false,
      type: 'mood',
      condition: 7,
      category: 'mind'
    },
    {
      id: 'mindful_month',
      title: '–û—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü',
      description: '30 –¥–Ω–µ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
      icon: 'üß†',
      unlocked: false,
      type: 'mood',
      condition: 30,
      category: 'mind'
    },
    {
      id: 'happy_day',
      title: '–î–µ–Ω—å —Å—á–∞—Å—Ç—å—è',
      description: '–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ 5/5 –≤–µ—Å—å –¥–µ–Ω—å',
      icon: 'üòç',
      unlocked: false,
      type: 'mood',
      condition: 5,
      category: 'mind'
    }
  ];

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–∑ AsyncStorage
  async loadAchievements(): Promise<Achievement[]> {
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ AsyncStorage
      // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      return [...this.achievements];
    } catch (error) {
      console.error('Error loading achievements:', error);
      return [...this.achievements];
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ AsyncStorage
  async saveAchievements(achievements: Achievement[]): Promise<void> {
    try {
      this.achievements = achievements;
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ AsyncStorage
    } catch (error) {
      console.error('Error saving achievements:', error);
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  checkSleepAchievement(sleepHours: number, achievements: Achievement[]): Achievement[] {
    return achievements.map(achievement => {
      if (achievement.type === 'sleep' && !achievement.unlocked && sleepHours >= achievement.condition) {
        return {
          ...achievement,
          unlocked: true,
          unlockedAt: new Date()
        };
      }
      return achievement;
    });
  }

  checkWaterAchievement(waterAmount: number, achievements: Achievement[]): Achievement[] {
    return achievements.map(achievement => {
      if (achievement.type === 'water' && !achievement.unlocked && waterAmount >= achievement.condition) {
        return {
          ...achievement,
          unlocked: true,
          unlockedAt: new Date()
        };
      }
      return achievement;
    });
  }

  checkMoodAchievement(achievements: Achievement[]): Achievement[] {
    return achievements.map(achievement => {
      if (achievement.type === 'mood' && achievement.id === 'first_mood' && !achievement.unlocked) {
        return {
          ...achievement,
          unlocked: true,
          unlockedAt: new Date()
        };
      }
      return achievement;
    });
  }

  checkWorkoutAchievement(totalWorkouts: number, weeklyMinutes: number, achievements: Achievement[]): Achievement[] {
    return achievements.map(achievement => {
      if (achievement.type === 'workout') {
        if (achievement.id === 'first_workout' && !achievement.unlocked && totalWorkouts >= achievement.condition) {
          return {
            ...achievement,
            unlocked: true,
            unlockedAt: new Date()
          };
        }
        if (achievement.id === 'weekly_goal' && !achievement.unlocked && weeklyMinutes >= achievement.condition) {
          return {
            ...achievement,
            unlocked: true,
            unlockedAt: new Date()
          };
        }
      }
      return achievement;
    });
  }

  getAchievements(): Achievement[] {
    return [...this.achievements];
  }

  // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  getAchievementsByCategory(category: string): Achievement[] {
    return this.achievements.filter(achievement => achievement.category === category);
  }

  // –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  async resetAchievements(): Promise<Achievement[]> {
    const resetAchievements = this.achievements.map(achievement => ({
      ...achievement,
      unlocked: false,
      unlockedAt: undefined
    }));
    await this.saveAchievements(resetAchievements);
    return resetAchievements;
  }
}

export const achievementsService = new AchievementsService();