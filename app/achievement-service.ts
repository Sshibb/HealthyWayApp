// ../achievement-service.ts
import AsyncStorage from '@react-native-async-storage/async-storage';

export interface Achievement {
  id: string;
  title: string;
  description: string;
  icon: string;
  category: 'water' | 'sleep' | 'sport' | 'mood' | 'streak' | 'general';
  requirement: string;
  progress: number;
  target: number;
  completed: boolean;
  dateCompleted?: Date;
  rarity: 'common' | 'rare' | 'epic' | 'legendary';
}

export interface ActivityData {
  water?: {
    amount: number;
    date: Date;
  };
  sleep?: {
    duration: number;
    date: Date;
  };
  sport?: {
    duration: number;
    date: Date;
  };
  mood?: {
    level: number;
    date: Date;
  };
}

class AchievementService {
  private achievements: Achievement[] = [];
  private readonly STORAGE_KEY = 'achievements_data';

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  initializeAchievements(): Achievement[] {
    return [
      // –í–æ–¥–∞
      {
        id: 'water-1',
        title: '–ü–µ—Ä–≤–∞—è –∫–∞–ø–ª—è',
        description: '–í—ã–ø–µ–π—Ç–µ –ø–µ—Ä–≤—ã–π —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã',
        icon: 'üíß',
        category: 'water',
        requirement: '–í—ã–ø–∏—Ç—å 250 –º–ª –≤–æ–¥—ã',
        progress: 0,
        target: 250,
        completed: false,
        rarity: 'common',
      },
      {
        id: 'water-2',
        title: '–í–æ–¥–æ—Ö–ª—ë–±',
        description: '–í—ã–ø–µ–π—Ç–µ 2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –∑–∞ –¥–µ–Ω—å',
        icon: 'üåä',
        category: 'water',
        requirement: '–í—ã–ø–∏—Ç—å 2000 –º–ª –≤–æ–¥—ã –∑–∞ –¥–µ–Ω—å',
        progress: 0,
        target: 2000,
        completed: false,
        rarity: 'rare',
      },
      {
        id: 'water-3',
        title: '–ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è',
        description: '–í—ã–ø–µ–π—Ç–µ 10 –ª–∏—Ç—Ä–æ–≤ –≤–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é',
        icon: 'ü¶≠',
        category: 'water',
        requirement: '–í—ã–ø–∏—Ç—å 10000 –º–ª –≤–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é',
        progress: 0,
        target: 10000,
        completed: false,
        rarity: 'epic',
      },

      // –°–æ–Ω
      {
        id: 'sleep-1',
        title: '–ü–µ—Ä–≤–∞—è –Ω–æ—á—å',
        description: '–ó–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Å–æ–Ω',
        icon: 'üåô',
        category: 'sleep',
        requirement: '–ó–∞–ø–∏—Å–∞—Ç—å 1 –Ω–æ—á—å —Å–Ω–∞',
        progress: 0,
        target: 1,
        completed: false,
        rarity: 'common',
      },
      {
        id: 'sleep-2',
        title: '–ó–¥–æ—Ä–æ–≤—ã–π —Å–æ–Ω',
        description: '–ü—Ä–æ—Å–ø–∏—Ç–µ 8 —á–∞—Å–æ–≤ –∑–∞ –Ω–æ—á—å',
        icon: 'üò¥',
        category: 'sleep',
        requirement: '–ü—Ä–æ—Å–ø–∞—Ç—å 8 —á–∞—Å–æ–≤ –∑–∞ –æ–¥–Ω—É –Ω–æ—á—å',
        progress: 0,
        target: 8,
        completed: false,
        rarity: 'rare',
      },

      // –°–ø–æ—Ä—Ç
      {
        id: 'sport-1',
        title: '–ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
        description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
        icon: 'üèÉ',
        category: 'sport',
        requirement: '–ó–∞–≤–µ—Ä—à–∏—Ç—å 1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
        progress: 0,
        target: 1,
        completed: false,
        rarity: 'common',
      },
      {
        id: 'sport-2',
        title: '–ê–∫—Ç–∏–≤–Ω–∞—è –Ω–µ–¥–µ–ª—è',
        description: '–ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å —Å–ø–æ—Ä—Ç–æ–º 3 –¥–Ω—è –≤ –Ω–µ–¥–µ–ª—é',
        icon: 'üí™',
        category: 'sport',
        requirement: '3 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é',
        progress: 0,
        target: 3,
        completed: false,
        rarity: 'rare',
      },

      // –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
      {
        id: 'mood-1',
        title: '–ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å',
        description: '–ó–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–ø–µ—Ä–≤—ã–µ',
        icon: 'üòä',
        category: 'mood',
        requirement: '–°–¥–µ–ª–∞—Ç—å 1 –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
        progress: 0,
        target: 1,
        completed: false,
        rarity: 'common',
      },
    ];
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  async loadAchievements(): Promise<Achievement[]> {
    try {
      const stored = await AsyncStorage.getItem(this.STORAGE_KEY);
      if (stored) {
        this.achievements = JSON.parse(stored);
      } else {
        this.achievements = this.initializeAchievements();
        await this.saveAchievements();
      }
      return this.achievements;
    } catch (error) {
      console.error('Error loading achievements:', error);
      this.achievements = this.initializeAchievements();
      return this.achievements;
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  async saveAchievements(): Promise<void> {
    try {
      await AsyncStorage.setItem(this.STORAGE_KEY, JSON.stringify(this.achievements));
    } catch (error) {
      console.error('Error saving achievements:', error);
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  async updateProgress(activityData: ActivityData): Promise<{updated: Achievement[], unlocked: Achievement[]}> {
    const updated: Achievement[] = [];
    const unlocked: Achievement[] = [];

    for (const achievement of this.achievements) {
      const oldProgress = achievement.progress;
      const wasCompleted = achievement.completed;

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      switch (achievement.category) {
        case 'water':
          if (activityData.water) {
            achievement.progress += activityData.water.amount;
          }
          break;

        case 'sleep':
          if (activityData.sleep) {
            if (achievement.id === 'sleep-1') {
              achievement.progress = 1; // –ü—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—å —Å–Ω–∞
            } else if (achievement.id === 'sleep-2' && activityData.sleep.duration >= 8) {
              achievement.progress = Math.max(achievement.progress, activityData.sleep.duration);
            }
          }
          break;

        case 'sport':
          if (activityData.sport) {
            if (achievement.id === 'sport-1') {
              achievement.progress = 1; // –ü—Ä–æ—Å—Ç–æ —Ñ–∞–∫—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
            } else if (achievement.id === 'sport-2') {
              achievement.progress += 1; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            }
          }
          break;

        case 'mood':
          if (activityData.mood) {
            achievement.progress = 1; // –ü—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
          }
          break;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      if (!wasCompleted && achievement.progress >= achievement.target) {
        achievement.completed = true;
        achievement.dateCompleted = new Date();
        unlocked.push(achievement);
      }

      if (oldProgress !== achievement.progress) {
        updated.push(achievement);
      }
    }

    if (updated.length > 0) {
      await this.saveAchievements();
    }

    return { updated, unlocked };
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  getAchievements(): Achievement[] {
    return this.achievements;
  }

  // –°–±—Ä–æ—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
  async resetProgress(): Promise<void> {
    this.achievements = this.initializeAchievements();
    await this.saveAchievements();
  }
}

export const achievementService = new AchievementService();