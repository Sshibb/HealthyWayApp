import React, { useState, useEffect } from 'react';
import { SafeAreaView } from 'react-native-safe-area-context';
import { 
  Text,
  StyleSheet,
  ScrollView,
  View,
  TouchableOpacity,
} from 'react-native';
import { Link } from 'expo-router';
import { Ionicons } from '@expo/vector-icons';

// –¢–∏–ø—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
interface HealthData {
  water: {
    amount: number;
    goal: number;
    lastUpdate: Date;
  };
  sleep: {
    duration: number;
    goal: number;
    lastUpdate: Date;
  };
  mood: {
    level: number;
    emoji: string;
    lastUpdate: Date;
  };
  workout: {
    type: string;
    duration: number;
    lastUpdate: Date;
  };
}

export default function HomeScreen() {
  const [healthData, setHealthData] = useState<HealthData>({
    water: {
      amount: 0,
      goal: 2000,
      lastUpdate: new Date()
    },
    sleep: {
      duration: 0,
      goal: 8,
      lastUpdate: new Date()
    },
    mood: {
      level: 0,
      emoji: 'üòê',
      lastUpdate: new Date()
    },
    workout: {
      type: '',
      duration: 0,
      lastUpdate: new Date()
    }
  });

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç AsyncStorage –∏–ª–∏ API)
  useEffect(() => {
    // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const mockData: HealthData = {
      water: {
        amount: 1250,
        goal: 2000,
        lastUpdate: new Date()
      },
      sleep: {
        duration: 7.5,
        goal: 8,
        lastUpdate: new Date(Date.now() - 12 * 60 * 60 * 1000) // 12 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
      },
      mood: {
        level: 4,
        emoji: 'üôÇ',
        lastUpdate: new Date(Date.now() - 6 * 60 * 60 * 1000) // 6 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
      },
      workout: {
        type: '–ë–µ–≥',
        duration: 45,
        lastUpdate: new Date(Date.now() - 24 * 60 * 60 * 1000) // 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥
      }
    };
    setHealthData(mockData);
  }, []);

  // –†–∞—Å—á–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
  const getProgress = (current: number, goal: number) => {
    return Math.min((current / goal) * 100, 100);
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const formatTimeAgo = (date: Date) => {
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    
    if (diffHours < 1) return '–¢–æ–ª—å–∫–æ —á—Ç–æ';
    if (diffHours < 24) return `${diffHours}—á –Ω–∞–∑–∞–¥`;
    return `${Math.floor(diffHours / 24)}–¥ –Ω–∞–∑–∞–¥`;
  };

  return ( 
    <SafeAreaView style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollContent}>
        {/* –®–∞–ø–∫–∞ */}
        <View style={styles.header}>
          <Text style={styles.title}>Health Tracker</Text>
          <Text style={styles.subtitle}>–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º</Text>
        </View>

        {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
        <View style={styles.quickActions}>
          <Text style={styles.sectionTitle}>–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</Text>
          <View style={styles.actionsGrid}>
            <Link href="/water" asChild>
              <TouchableOpacity style={styles.actionButton}>
                <View style={[styles.actionIcon, { backgroundColor: '#4CAF50' }]}>
                  <Text style={styles.actionEmoji}>üíß</Text>
                </View>
                <Text style={styles.actionText}>–í–æ–¥–∞</Text>
              </TouchableOpacity>
            </Link>

            <Link href="/sleep" asChild>
              <TouchableOpacity style={styles.actionButton}>
                <View style={[styles.actionIcon, { backgroundColor: '#2196F3' }]}>
                  <Text style={styles.actionEmoji}>üí§</Text>
                </View>
                <Text style={styles.actionText}>–°–æ–Ω</Text>
              </TouchableOpacity>
            </Link>

            <Link href="/mood" asChild>
              <TouchableOpacity style={styles.actionButton}>
                <View style={[styles.actionIcon, { backgroundColor: '#FF9800' }]}>
                  <Text style={styles.actionEmoji}>üòå</Text>
                </View>
                <Text style={styles.actionText}>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</Text>
              </TouchableOpacity>
            </Link>

            <Link href="/workout" asChild>
              <TouchableOpacity style={styles.actionButton}>
                <View style={[styles.actionIcon, { backgroundColor: '#FF5722' }]}>
                  <Text style={styles.actionEmoji}>üí™</Text>
                </View>
                <Text style={styles.actionText}>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</Text>
              </TouchableOpacity>
            </Link>
          </View>
        </View>

        {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ */}
        <View style={styles.recentSection}>
          <Text style={styles.sectionTitle}>–°–µ–≥–æ–¥–Ω—è</Text>
          
          {/* –í–æ–¥–∞ */}
          <Link href="/water" asChild>
            <TouchableOpacity style={styles.healthCard}>
              <View style={styles.healthCardHeader}>
                <View style={styles.healthCardTitle}>
                  <Text style={styles.healthCardEmoji}>üíß</Text>
                  <Text style={styles.healthCardName}>–í–æ–¥–∞</Text>
                </View>
                <Text style={styles.healthCardTime}>
                  {formatTimeAgo(healthData.water.lastUpdate)}
                </Text>
              </View>
              <View style={styles.progressContainer}>
                <View style={styles.progressLabels}>
                  <Text style={styles.progressAmount}>
                    {healthData.water.amount} –º–ª
                  </Text>
                  <Text style={styles.progressGoal}>
                    / {healthData.water.goal} –º–ª
                  </Text>
                </View>
                <View style={styles.progressBar}>
                  <View 
                    style={[
                      styles.progressFill,
                      { 
                        width: `${getProgress(healthData.water.amount, healthData.water.goal)}%`,
                        backgroundColor: '#4CAF50'
                      }
                    ]} 
                  />
                </View>
                <Text style={styles.progressPercent}>
                  {Math.round(getProgress(healthData.water.amount, healthData.water.goal))}%
                </Text>
              </View>
            </TouchableOpacity>
          </Link>

          {/* –°–æ–Ω */}
          <Link href="/sleep" asChild>
            <TouchableOpacity style={styles.healthCard}>
              <View style={styles.healthCardHeader}>
                <View style={styles.healthCardTitle}>
                  <Text style={styles.healthCardEmoji}>üí§</Text>
                  <Text style={styles.healthCardName}>–°–æ–Ω</Text>
                </View>
                <Text style={styles.healthCardTime}>
                  {formatTimeAgo(healthData.sleep.lastUpdate)}
                </Text>
              </View>
              <View style={styles.progressContainer}>
                <View style={styles.progressLabels}>
                  <Text style={styles.progressAmount}>
                    {healthData.sleep.duration}—á
                  </Text>
                  <Text style={styles.progressGoal}>
                    / {healthData.sleep.goal}—á
                  </Text>
                </View>
                <View style={styles.progressBar}>
                  <View 
                    style={[
                      styles.progressFill,
                      { 
                        width: `${getProgress(healthData.sleep.duration, healthData.sleep.goal)}%`,
                        backgroundColor: '#2196F3'
                      }
                    ]} 
                  />
                </View>
                <Text style={styles.progressPercent}>
                  {Math.round(getProgress(healthData.sleep.duration, healthData.sleep.goal))}%
                </Text>
              </View>
            </TouchableOpacity>
          </Link>

          {/* –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ */}
          <Link href="/mood" asChild>
            <TouchableOpacity style={styles.healthCard}>
              <View style={styles.healthCardHeader}>
                <View style={styles.healthCardTitle}>
                  <Text style={styles.healthCardEmoji}>{healthData.mood.emoji}</Text>
                  <Text style={styles.healthCardName}>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</Text>
                </View>
                <Text style={styles.healthCardTime}>
                  {formatTimeAgo(healthData.mood.lastUpdate)}
                </Text>
              </View>
              <View style={styles.moodContainer}>
                <Text style={styles.moodText}>
                  {healthData.mood.level > 0 ? '–ó–∞–ø–∏—Å–∞–Ω–Ω–æ —Å–µ–≥–æ–¥–Ω—è' : '–ï—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ'}
                </Text>
                <View style={styles.moodLevel}>
                  <Text style={styles.moodLevelText}>
                    {healthData.mood.level > 0 ? `–£—Ä–æ–≤–µ–Ω—å: ${healthData.mood.level}/5` : '–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'}
                  </Text>
                </View>
              </View>
            </TouchableOpacity>
          </Link>

          {/* –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ */}
          <Link href="/workout" asChild>
            <TouchableOpacity style={styles.healthCard}>
              <View style={styles.healthCardHeader}>
                <View style={styles.healthCardTitle}>
                  <Text style={styles.healthCardEmoji}>üí™</Text>
                  <Text style={styles.healthCardName}>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</Text>
                </View>
                <Text style={styles.healthCardTime}>
                  {formatTimeAgo(healthData.workout.lastUpdate)}
                </Text>
              </View>
              <View style={styles.workoutContainer}>
                {healthData.workout.duration > 0 ? (
                  <>
                    <Text style={styles.workoutType}>{healthData.workout.type}</Text>
                    <Text style={styles.workoutDuration}>
                      {healthData.workout.duration} –º–∏–Ω—É—Ç
                    </Text>
                  </>
                ) : (
                  <Text style={styles.noWorkoutText}>–°–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –±—ã–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</Text>
                )}
              </View>
            </TouchableOpacity>
          </Link>
        </View>

        {/* –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é */}
        <View style={styles.callToAction}>
          <Text style={styles.callToActionTitle}>–ì–æ—Ç–æ–≤—ã –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ?</Text>
          <Text style={styles.callToActionSubtitle}>
            –ù–∞—á–Ω–∏—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –¥–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π!
          </Text>
          <Link href="/workout" asChild>
            <TouchableOpacity style={styles.ctaButton}>
              <Text style={styles.ctaButtonText}>–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É</Text>
            </TouchableOpacity>
          </Link>
        </View>

        {/* –ö–Ω–æ–ø–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π */}
        <Link href="/achievements" asChild>
          <TouchableOpacity style={styles.achievementsButton} activeOpacity={0.8}>
            <Ionicons name="trophy" size={24} color="#FFD700" />
            <Text style={styles.achievementsButtonText}>–ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</Text>
            <Ionicons name="chevron-forward" size={20} color="#666" />
          </TouchableOpacity>
        </Link>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  scrollContent: {
    padding: 16,
  },
  header: {
    marginBottom: 24,
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#000',
    marginBottom: 4,
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
  },
  quickActions: {
    marginBottom: 24,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#333',
    marginBottom: 16,
  },
  actionsGrid: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  actionButton: {
    alignItems: 'center',
    flex: 1,
    padding: 8,
  },
  actionIcon: {
    width: 60,
    height: 60,
    borderRadius: 30,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 8,
  },
  actionEmoji: {
    fontSize: 24,
  },
  actionText: {
    fontSize: 12,
    color: '#333',
    fontWeight: '500',
    textAlign: 'center',
  },
  recentSection: {
    marginBottom: 24,
  },
  healthCard: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 2,
  },
  healthCardHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  healthCardTitle: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  healthCardEmoji: {
    fontSize: 20,
  },
  healthCardName: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
  },
  healthCardTime: {
    fontSize: 12,
    color: '#666',
  },
  progressContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  progressLabels: {
    flexDirection: 'row',
    alignItems: 'baseline',
    minWidth: 100,
  },
  progressAmount: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  progressGoal: {
    fontSize: 14,
    color: '#666',
  },
  progressBar: {
    flex: 1,
    height: 8,
    backgroundColor: '#f0f0f0',
    borderRadius: 4,
    overflow: 'hidden',
  },
  progressFill: {
    height: '100%',
    borderRadius: 4,
  },
  progressPercent: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333',
    minWidth: 40,
    textAlign: 'right',
  },
  moodContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  moodText: {
    fontSize: 14,
    color: '#666',
  },
  moodLevel: {
    backgroundColor: '#f0f0f0',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 12,
  },
  moodLevelText: {
    fontSize: 12,
    color: '#333',
    fontWeight: '500',
  },
  workoutContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  workoutType: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
  },
  workoutDuration: {
    fontSize: 14,
    color: '#666',
  },
  noWorkoutText: {
    fontSize: 14,
    color: '#999',
    fontStyle: 'italic',
  },
  callToAction: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 20,
    marginBottom: 20,
    alignItems: 'center',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 2,
  },
  callToActionTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 8,
  },
  callToActionSubtitle: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
    marginBottom: 16,
  },
  ctaButton: {
    backgroundColor: '#FF5722',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 25,
  },
  ctaButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
  achievementsButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: '#fff',
    padding: 16,
    borderRadius: 12,
    borderWidth: 2,
    borderColor: '#FFD700',
    marginBottom: 20,
  },
  achievementsButtonText: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    flex: 1,
    marginLeft: 12,
  },
});