import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  Dimensions,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';
import { Link } from 'expo-router';
import { achievementsService, Achievement } from '../achievements-service';

const { width } = Dimensions.get('window');

export default function AchievementsScreen() {
  const [achievements, setAchievements] = useState<Achievement[]>([]);
  const [activeCategory, setActiveCategory] = useState<string>('all');
  const [activeFilter, setActiveFilter] = useState<'all' | 'common' | 'rare' | 'epic' | 'legendary'>('all');
  const [unlockedCount, setUnlockedCount] = useState(0);
  const [totalCount, setTotalCount] = useState(0);

  useEffect(() => {
    loadAchievements();
  }, []);

  const loadAchievements = async () => {
    const loadedAchievements = await achievementsService.loadAchievements();
    setAchievements(loadedAchievements);
    setUnlockedCount(loadedAchievements.filter(a => a.unlocked).length);
    setTotalCount(loadedAchievements.length);
  };

  const resetAchievements = () => {
    Alert.alert(
      '–°–±—Ä–æ—Å–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è?',
      '–í—Å–µ –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã. –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.',
      [
        { text: '–û—Ç–º–µ–Ω–∞', style: 'cancel' },
        {
          text: '–°–±—Ä–æ—Å–∏—Ç—å',
          style: 'destructive',
          onPress: async () => {
            const resetAchievements = await achievementsService.resetAchievements();
            setAchievements(resetAchievements);
            setUnlockedCount(0);
            Alert.alert('‚úÖ –°–±—Ä–æ—à–µ–Ω–æ', '–í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã');
          },
        },
      ]
    );
  };

  const categories = [
    { id: 'all', name: '–í—Å–µ', icon: 'üèÜ', color: '#FFD700' },
    { id: 'health', name: '–ó–¥–æ—Ä–æ–≤—å–µ', icon: 'üíö', color: '#4CAF50' },
    { id: 'fitness', name: '–§–∏—Ç–Ω–µ—Å', icon: 'üí™', color: '#FF5722' },
    { id: 'mind', name: '–†–∞–∑—É–º', icon: 'üß†', color: '#9C27B0' },
    { id: 'dedication', name: '–ü—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å', icon: 'üî•', color: '#FF9800' },
    { id: 'special', name: '–û—Å–æ–±—ã–µ', icon: 'üé™', color: '#E91E63' },
  ];

  const rarityFilters = [
    { id: 'all', name: '–í—Å–µ', color: '#666' },
    { id: 'common', name: '–û–±—ã—á–Ω—ã–µ', color: '#6B7280' },
    { id: 'rare', name: '–†–µ–¥–∫–∏–µ', color: '#3B82F6' },
    { id: 'epic', name: '–≠–ø–∏—á–µ—Å–∫–∏–µ', color: '#8B5CF6' },
    { id: 'legendary', name: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ', color: '#F59E0B' },
  ];

  const filteredAchievements = achievements.filter(achievement => {
    const categoryMatch = activeCategory === 'all' || achievement.category === activeCategory;
    const rarityMatch = activeFilter === 'all' || achievement.rarity === activeFilter;
    return categoryMatch && rarityMatch;
  });

  const unlockedInCategory = filteredAchievements.filter(a => a.unlocked).length;
  const totalInCategory = filteredAchievements.length;
  const progressInCategory = totalInCategory > 0 ? (unlockedInCategory / totalInCategory) * 100 : 0;

  const getCategoryColor = (category: string) => {
    const categoryObj = categories.find(c => c.id === category);
    return categoryObj ? categoryObj.color : '#666';
  };

  const getProgressHint = (achievement: Achievement) => {
    switch (achievement.id) {
      // –ó–¥–æ—Ä–æ–≤—å–µ
      case 'first_sleep':
        return '–ü—Ä–æ—Å–ø–∏—Ç–µ 8 —á–∞—Å–æ–≤ –∑–∞ –æ–¥–Ω—É –Ω–æ—á—å';
      case 'first_water':
        return '–í—ã–ø–µ–π—Ç–µ 2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –∑–∞ –¥–µ–Ω—å';
      case 'perfect_week_sleep':
        return '–°–ø–∏—Ç–µ 7+ —á–∞—Å–æ–≤ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥';
      case 'hydration_master':
        return '–ü–µ–π—Ç–µ 2+ –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥';
      case 'sleep_expert':
        return '–ù–∞–±–µ—Ä–∏—Ç–µ 100 —á–∞—Å–æ–≤ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–Ω–∞';
      case 'water_expert':
        return '–í—ã–ø–µ–π—Ç–µ 100 –ª–∏—Ç—Ä–æ–≤ –≤–æ–¥—ã –≤ —Å—É–º–º–µ';
      case 'sleep_marathon':
        return '–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–æ–Ω 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥';
      
      // –§–∏—Ç–Ω–µ—Å
      case 'first_workout':
        return '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ª—é–±—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É';
      case 'weekly_goal':
        return '–ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å 150 –º–∏–Ω—É—Ç –≤ –Ω–µ–¥–µ–ª—é';
      case 'marathon':
        return '–ü—Ä–æ–±–µ–≥–∏—Ç–µ 50+ –∫–º –≤ —Å—É–º–º–µ';
      case 'streak_7':
        return '–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥';
      case 'iron_man':
        return '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ 10 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫';
      case 'fitness_pro':
        return '–ó–∞–≤–µ—Ä—à–∏—Ç–µ 100 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫';
      case 'early_bird':
        return '–ü–æ—Ç—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å –¥–æ 7 —É—Ç—Ä–∞';
      case 'night_owl':
        return '–ü–æ—Ç—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å –ø–æ—Å–ª–µ 10 –≤–µ—á–µ—Ä–∞';
      
      // –†–∞–∑—É–º
      case 'first_mood':
        return '–ó–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ';
      case 'positive_week':
        return '–û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ 4+ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥';
      case 'mindful_month':
        return '–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ 30 –¥–Ω–µ–π';
      case 'happy_day':
        return '–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –Ω–∞ 5/5';
      case 'emotional_explorer':
        return '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–µ 5 —É—Ä–æ–≤–Ω–µ–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è';
      case 'zen_master':
        return '–ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å –π–æ–≥–æ–π/–º–µ–¥–∏—Ç–∞—Ü–∏–µ–π 50 —Ä–∞–∑';
      
      // –ü—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å
      case 'week_streak':
        return '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥';
      case 'month_streak':
        return '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥';
      case 'triple_streak':
        return '–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–æ–Ω, –≤–æ–¥—É –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥';
      case 'perfect_day':
        return '–°–æ–Ω 8—á + –≤–æ–¥–∞ 2–ª + —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ + –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ 4+ –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å';
      case 'health_guru':
        return '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 100 –¥–Ω–µ–π';
      
      // –û—Å–æ–±—ã–µ
      case 'first_achievement':
        return '–ü–æ–ª—É—á–∏—Ç–µ –ª—é–±–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ';
      case 'halfway_there':
        return '–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ 50% –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π';
      case 'completionist':
        return '–†–∞–∑–±–ª–æ–∫–∏—Ä—É–π—Ç–µ –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è';
      case 'weekend_warrior':
        return '–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å —Ç–æ–ª—å–∫–æ –ø–æ –≤—ã—Ö–æ–¥–Ω—ã–º 4 –Ω–µ–¥–µ–ª–∏ –ø–æ–¥—Ä—è–¥';
      case 'four_seasons':
        return '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 90 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥';
      case 'early_adopter':
        return '–ë—É–¥—å—Ç–µ —Å—Ä–µ–¥–∏ –ø–µ—Ä–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è';
      
      default:
        return '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è!';
    }
  };

  const AchievementCard = ({ achievement }: { achievement: Achievement }) => (
    <View style={[
      styles.achievementCard,
      achievement.unlocked ? styles.unlockedCard : styles.lockedCard
    ]}>
      <View style={styles.achievementHeader}>
        <View style={[
          styles.achievementIconContainer,
          { backgroundColor: achievement.unlocked ? getCategoryColor(achievement.category) : '#f0f0f0' }
        ]}>
          <Text style={[
            styles.achievementIcon,
            !achievement.unlocked && styles.lockedIcon
          ]}>
            {achievement.icon}
          </Text>
          {achievement.unlocked && (
            <View style={styles.unlockedBadge}>
              <Ionicons name="checkmark" size={12} color="#fff" />
            </View>
          )}
        </View>
        
        <View style={styles.achievementInfo}>
          <View style={styles.achievementTitleRow}>
            <Text style={[
              styles.achievementTitle,
              achievement.unlocked ? styles.unlockedText : styles.lockedText
            ]}>
              {achievement.title}
            </Text>
            <View style={[
              styles.rarityBadge,
              { backgroundColor: achievementsService.getRarityColor(achievement.rarity) }
            ]}>
              <Text style={styles.rarityBadgeText}>
                {achievementsService.getRarityName(achievement.rarity)}
              </Text>
            </View>
          </View>
          
          <Text style={styles.achievementDescription}>
            {achievement.description}
          </Text>
          
          {achievement.unlocked && achievement.unlockedAt && (
            <View style={styles.unlockedInfo}>
              <Ionicons name="time-outline" size={12} color="#4CAF50" />
              <Text style={styles.unlockedDate}>
                {achievement.unlockedAt.toLocaleDateString('ru-RU', {
                  day: 'numeric',
                  month: 'long',
                  year: 'numeric'
                })}
              </Text>
            </View>
          )}
        </View>

        <View style={styles.achievementStatus}>
          {achievement.unlocked ? (
            <Ionicons name="lock-open" size={24} color="#4CAF50" />
          ) : (
            <Ionicons name="lock-closed" size={24} color="#ccc" />
          )}
        </View>
      </View>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –Ω–µ–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π */}
      {!achievement.unlocked && (
        <View style={styles.progressHint}>
          <Ionicons name="bulb-outline" size={14} color="#FFD700" />
          <Text style={styles.progressHintText}>
            {getProgressHint(achievement)}
          </Text>
        </View>
      )}
    </View>
  );

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollContent}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <View style={styles.header}>
          <View style={styles.headerMain}>
            <Ionicons name="trophy" size={36} color="#FFD700" />
            <View style={styles.headerText}>
              <Text style={styles.title}>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</Text>
              <Text style={styles.subtitle}>
                {unlockedCount} –∏–∑ {totalCount} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
              </Text>
            </View>
          </View>
          <TouchableOpacity 
            style={styles.resetButton}
            onPress={resetAchievements}
          >
            <Ionicons name="refresh" size={20} color="#666" />
          </TouchableOpacity>
        </View>

        {/* –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å */}
        <View style={styles.overallProgress}>
          <View style={styles.progressCircle}>
            <Text style={styles.progressPercent}>
              {Math.round((unlockedCount / totalCount) * 100)}%
            </Text>
            <Text style={styles.progressLabel}>–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å</Text>
          </View>
          <View style={styles.progressStats}>
            <View style={styles.statItem}>
              <Text style={styles.statNumber}>{unlockedCount}</Text>
              <Text style={styles.statLabel}>–ü–æ–ª—É—á–µ–Ω–æ</Text>
            </View>
            <View style={styles.statItem}>
              <Text style={styles.statNumber}>{totalCount - unlockedCount}</Text>
              <Text style={styles.statLabel}>–û—Å—Ç–∞–ª–æ—Å—å</Text>
            </View>
            <View style={styles.statItem}>
              <Text style={styles.statNumber}>{totalCount}</Text>
              <Text style={styles.statLabel}>–í—Å–µ–≥–æ</Text>
            </View>
          </View>
        </View>

        {/* –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
        <View style={styles.categoriesSection}>
          <Text style={styles.sectionTitle}>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</Text>
          <ScrollView 
            horizontal 
            showsHorizontalScrollIndicator={false}
            contentContainerStyle={styles.categoriesContainer}
          >
            {categories.map((category) => (
              <TouchableOpacity
                key={category.id}
                style={[
                  styles.categoryButton,
                  activeCategory === category.id && styles.categoryButtonActive,
                  { borderColor: category.color }
                ]}
                onPress={() => setActiveCategory(category.id)}
              >
                <Text style={styles.categoryIcon}>{category.icon}</Text>
                <Text style={[
                  styles.categoryName,
                  activeCategory === category.id && { color: category.color }
                ]}>
                  {category.name}
                </Text>
                <Text style={styles.categoryCount}>
                  {achievements.filter(a => a.category === category.id && a.unlocked).length}/
                  {achievements.filter(a => a.category === category.id).length}
                </Text>
              </TouchableOpacity>
            ))}
          </ScrollView>
        </View>

        {/* –§–∏–ª—å—Ç—Ä—ã —Ä–µ–¥–∫–æ—Å—Ç–∏ */}
        <View style={styles.raritySection}>
          <Text style={styles.sectionTitle}>–†–µ–¥–∫–æ—Å—Ç—å</Text>
          <ScrollView 
            horizontal 
            showsHorizontalScrollIndicator={false}
            contentContainerStyle={styles.rarityContainer}
          >
            {rarityFilters.map((filter) => (
              <TouchableOpacity
                key={filter.id}
                style={[
                  styles.rarityButton,
                  activeFilter === filter.id && styles.rarityButtonActive,
                  { backgroundColor: filter.color + '20', borderColor: filter.color }
                ]}
                onPress={() => setActiveFilter(filter.id as any)}
              >
                <Text style={[
                  styles.rarityText,
                  activeFilter === filter.id && { color: filter.color, fontWeight: '600' }
                ]}>
                  {filter.name}
                </Text>
              </TouchableOpacity>
            ))}
          </ScrollView>
        </View>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
        {activeCategory !== 'all' && (
          <View style={styles.categoryProgress}>
            <View style={styles.categoryProgressHeader}>
              <Text style={styles.categoryProgressTitle}>
                {categories.find(c => c.id === activeCategory)?.name}
              </Text>
              <Text style={styles.categoryProgressStats}>
                {unlockedInCategory} –∏–∑ {totalInCategory}
              </Text>
            </View>
            <View style={styles.progressBarBackground}>
              <View
                style={[
                  styles.progressBarFill,
                  { 
                    width: `${progressInCategory}%`,
                    backgroundColor: getCategoryColor(activeCategory)
                  }
                ]}
              />
            </View>
          </View>
        )}

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
        <View style={styles.filterStats}>
          <Text style={styles.filterStatsText}>
            –ü–æ–∫–∞–∑–∞–Ω–æ: {filteredAchievements.length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            {unlockedInCategory > 0 && ` (${unlockedInCategory} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ)`}
          </Text>
        </View>

        {/* –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π */}
        <View style={styles.achievementsList}>
          {filteredAchievements.length === 0 ? (
            <View style={styles.emptyState}>
              <Ionicons name="search-outline" size={64} color="#ccc" />
              <Text style={styles.emptyStateTitle}>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</Text>
              <Text style={styles.emptyStateText}>
                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
              </Text>
            </View>
          ) : (
            filteredAchievements.map((achievement) => (
              <AchievementCard
                key={achievement.id}
                achievement={achievement}
              />
            ))
          )}
        </View>

        {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ */}
        <Link href="/" asChild>
          <TouchableOpacity style={styles.backButton}>
            <Ionicons name="arrow-back" size={20} color="#fff" />
            <Text style={styles.backButtonText}>–ù–∞ –≥–ª–∞–≤–Ω—É—é</Text>
          </TouchableOpacity>
        </Link>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  scrollContent: {
    padding: 20,
    paddingBottom: 40,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 30,
  },
  headerMain: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
    flex: 1,
  },
  headerText: {
    flex: 1,
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#333',
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
    marginTop: 4,
  },
  resetButton: {
    padding: 8,
    backgroundColor: '#f0f0f0',
    borderRadius: 8,
  },
  overallProgress: {
    flexDirection: 'row',
    backgroundColor: '#fff',
    padding: 20,
    borderRadius: 20,
    marginBottom: 24,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 3,
  },
  progressCircle: {
    alignItems: 'center',
    justifyContent: 'center',
    width: 100,
    height: 100,
    borderRadius: 50,
    backgroundColor: '#FFF9C4',
    marginRight: 20,
  },
  progressPercent: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
  },
  progressLabel: {
    fontSize: 12,
    color: '#666',
    marginTop: 4,
    textAlign: 'center',
  },
  progressStats: {
    flex: 1,
    justifyContent: 'space-around',
  },
  statItem: {
    alignItems: 'center',
  },
  statNumber: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 4,
  },
  statLabel: {
    fontSize: 12,
    color: '#666',
  },
  categoriesSection: {
    marginBottom: 20,
  },
  sectionTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#333',
    marginBottom: 16,
  },
  categoriesContainer: {
    paddingRight: 20,
  },
  categoryButton: {
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#fff',
    borderRadius: 16,
    marginRight: 12,
    minWidth: 100,
    borderWidth: 2,
    borderColor: '#f0f0f0',
  },
  categoryButtonActive: {
    backgroundColor: '#f8f9fa',
    borderWidth: 2,
  },
  categoryIcon: {
    fontSize: 24,
    marginBottom: 8,
  },
  categoryName: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333',
    marginBottom: 4,
  },
  categoryCount: {
    fontSize: 12,
    color: '#666',
  },
  raritySection: {
    marginBottom: 20,
  },
  rarityContainer: {
    paddingRight: 20,
  },
  rarityButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    borderWidth: 2,
    marginRight: 8,
  },
  rarityButtonActive: {
    borderWidth: 3,
  },
  rarityText: {
    fontSize: 12,
    color: '#666',
    fontWeight: '500',
  },
  categoryProgress: {
    backgroundColor: '#fff',
    padding: 16,
    borderRadius: 16,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 3,
  },
  categoryProgressHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  categoryProgressTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
  },
  categoryProgressStats: {
    fontSize: 14,
    color: '#666',
    fontWeight: '500',
  },
  progressBarBackground: {
    height: 6,
    backgroundColor: '#f0f0f0',
    borderRadius: 3,
    overflow: 'hidden',
  },
  progressBarFill: {
    height: '100%',
    borderRadius: 3,
  },
  filterStats: {
    marginBottom: 16,
    paddingHorizontal: 8,
  },
  filterStatsText: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
    fontStyle: 'italic',
  },
  achievementsList: {
    gap: 12,
    marginBottom: 24,
  },
  achievementCard: {
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 16,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 3,
  },
  unlockedCard: {
    borderLeftWidth: 4,
    borderLeftColor: '#4CAF50',
  },
  lockedCard: {
    opacity: 0.8,
  },
  achievementHeader: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    gap: 16,
  },
  achievementIconContainer: {
    width: 60,
    height: 60,
    borderRadius: 30,
    justifyContent: 'center',
    alignItems: 'center',
    position: 'relative',
  },
  achievementIcon: {
    fontSize: 24,
  },
  lockedIcon: {
    opacity: 0.5,
  },
  unlockedBadge: {
    position: 'absolute',
    top: -2,
    right: -2,
    backgroundColor: '#4CAF50',
    borderRadius: 8,
    width: 16,
    height: 16,
    justifyContent: 'center',
    alignItems: 'center',
  },
  achievementInfo: {
    flex: 1,
  },
  achievementTitleRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 4,
  },
  achievementTitle: {
    fontSize: 18,
    fontWeight: '600',
    flex: 1,
    marginRight: 8,
  },
  unlockedText: {
    color: '#333',
  },
  lockedText: {
    color: '#999',
  },
  rarityBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 8,
  },
  rarityBadgeText: {
    fontSize: 10,
    color: '#fff',
    fontWeight: 'bold',
  },
  achievementDescription: {
    fontSize: 14,
    color: '#666',
    marginBottom: 8,
    lineHeight: 18,
  },
  unlockedInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 4,
  },
  unlockedDate: {
    fontSize: 12,
    color: '#4CAF50',
    fontWeight: '500',
  },
  achievementStatus: {
    padding: 4,
  },
  progressHint: {
    marginTop: 12,
    padding: 12,
    backgroundColor: '#f8f9fa',
    borderRadius: 8,
    borderLeftWidth: 3,
    borderLeftColor: '#FFD700',
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  progressHintText: {
    fontSize: 12,
    color: '#666',
    fontStyle: 'italic',
    flex: 1,
  },
  emptyState: {
    alignItems: 'center',
    padding: 40,
    backgroundColor: '#fff',
    borderRadius: 16,
    marginTop: 20,
  },
  emptyStateTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#999',
    marginTop: 16,
    marginBottom: 8,
  },
  emptyStateText: {
    fontSize: 14,
    color: '#ccc',
    textAlign: 'center',
    lineHeight: 20,
  },
  backButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
    backgroundColor: '#6200EE',
    padding: 16,
    borderRadius: 12,
  },
  backButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600',
  },
});