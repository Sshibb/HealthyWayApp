import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  ScrollView,
  Alert,
  Image,
} from 'react-native';
import { SafeAreaView } from 'react-native-safe-area-context';
import { Ionicons } from '@expo/vector-icons';
import { achievementService, Achievement } from '../achievement-service';

const [achievements, setAchievements] = useState<Achievement[]>([]);

useEffect(() => {
  const loadAchievements = async () => {
    const loaded = await achievementService.loadAchievements();
    setAchievements(loaded);
  };
  
  loadAchievements();
}, []);

// –¢–∏–ø—ã –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
interface Achievement {
  id: string;
  title: string;
  description: string;
  icon: string;
  category: 'water' | 'sleep' | 'sport' | 'mood' | 'streak' | 'general';
  requirement: string;
  progress: number;
  target: number;
  completed: boolean;
  dateCompleted?: Date;
  rarity: 'common' | 'rare' | 'epic' | 'legendary';
}

const Achievements: React.FC = () => {
  const [achievements, setAchievements] = useState<Achievement[]>([]);
  const [filter, setFilter] = useState<'all' | 'completed' | 'uncompleted'>('all');
  const [categoryFilter, setCategoryFilter] = useState<'all' | Achievement['category']>('all');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  useEffect(() => {
    const initialAchievements: Achievement[] = [
      // –í–æ–¥–∞
      {
        id: '1',
        title: '–ü–µ—Ä–≤–∞—è –∫–∞–ø–ª—è',
        description: '–í—ã–ø–µ–π—Ç–µ –ø–µ—Ä–≤—ã–π —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã',
        icon: 'üíß',
        category: 'water',
        requirement: '–í—ã–ø–∏—Ç—å 250 –º–ª –≤–æ–¥—ã',
        progress: 0,
        target: 250,
        completed: false,
        rarity: 'common',
      },
      {
        id: '2',
        title: '–í–æ–¥–æ—Ö–ª—ë–±',
        description: '–í—ã–ø–µ–π—Ç–µ 2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –∑–∞ –¥–µ–Ω—å',
        icon: 'üåä',
        category: 'water',
        requirement: '–í—ã–ø–∏—Ç—å 2000 –º–ª –≤–æ–¥—ã –∑–∞ –¥–µ–Ω—å',
        progress: 0,
        target: 2000,
        completed: false,
        rarity: 'rare',
      },
      {
        id: '3',
        title: '–ú–æ—Ä—Å–∫–æ–π –∫–æ—Ç–∏–∫',
        description: '–í—ã–ø–µ–π—Ç–µ 10 –ª–∏—Ç—Ä–æ–≤ –≤–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é',
        icon: 'ü¶≠',
        category: 'water',
        requirement: '–í—ã–ø–∏—Ç—å 10000 –º–ª –≤–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é',
        progress: 0,
        target: 10000,
        completed: false,
        rarity: 'epic',
      },

      // –°–æ–Ω
      {
        id: '4',
        title: '–ü–µ—Ä–≤–∞—è –Ω–æ—á—å',
        description: '–ó–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Å–æ–Ω',
        icon: 'üåô',
        category: 'sleep',
        requirement: '–ó–∞–ø–∏—Å–∞—Ç—å 1 –Ω–æ—á—å —Å–Ω–∞',
        progress: 0,
        target: 1,
        completed: false,
        rarity: 'common',
      },
      {
        id: '5',
        title: '–ó–¥–æ—Ä–æ–≤—ã–π —Å–æ–Ω',
        description: '–ü—Ä–æ—Å–ø–∏—Ç–µ 8 —á–∞—Å–æ–≤ –∑–∞ –Ω–æ—á—å',
        icon: 'üò¥',
        category: 'sleep',
        requirement: '–ü—Ä–æ—Å–ø–∞—Ç—å 8 —á–∞—Å–æ–≤ –∑–∞ –æ–¥–Ω—É –Ω–æ—á—å',
        progress: 0,
        target: 8,
        completed: false,
        rarity: 'rare',
      },
      {
        id: '6',
        title: '–ú–∞—Å—Ç–µ—Ä —Å–Ω–∞',
        description: '–°–ø–∏—Ç–µ 8+ —á–∞—Å–æ–≤ 7 –Ω–æ—á–µ–π –ø–æ–¥—Ä—è–¥',
        icon: 'üõå',
        category: 'sleep',
        requirement: '7 –Ω–æ—á–µ–π —Å 8+ —á–∞—Å–∞–º–∏ —Å–Ω–∞',
        progress: 0,
        target: 7,
        completed: false,
        rarity: 'legendary',
      },

      // –°–ø–æ—Ä—Ç
      {
        id: '7',
        title: '–ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
        description: '–ó–∞–≤–µ—Ä—à–∏—Ç–µ –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
        icon: 'üèÉ',
        category: 'sport',
        requirement: '–ó–∞–≤–µ—Ä—à–∏—Ç—å 1 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
        progress: 0,
        target: 1,
        completed: false,
        rarity: 'common',
      },
      {
        id: '8',
        title: '–ê–∫—Ç–∏–≤–Ω–∞—è –Ω–µ–¥–µ–ª—è',
        description: '–ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å —Å–ø–æ—Ä—Ç–æ–º 5 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é',
        icon: 'üí™',
        category: 'sport',
        requirement: '5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é',
        progress: 0,
        target: 5,
        completed: false,
        rarity: 'rare',
      },
      {
        id: '9',
        title: '–ñ–µ–ª–µ–∑–Ω—ã–π —á–µ–ª–æ–≤–µ–∫',
        description: '–ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å —Å–ø–æ—Ä—Ç–æ–º 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
        icon: 'üèÜ',
        category: 'sport',
        requirement: '30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏',
        progress: 0,
        target: 30,
        completed: false,
        rarity: 'legendary',
      },

      // –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
      {
        id: '10',
        title: '–ü–µ—Ä–≤–∞—è –∑–∞–ø–∏—Å—å',
        description: '–ó–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤–ø–µ—Ä–≤—ã–µ',
        icon: 'üòä',
        category: 'mood',
        requirement: '–°–¥–µ–ª–∞—Ç—å 1 –∑–∞–ø–∏—Å—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
        progress: 0,
        target: 1,
        completed: false,
        rarity: 'common',
      },
      {
        id: '11',
        title: '–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π',
        description: '–ò–º–µ–π—Ç–µ –≤—ã—Å–æ–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
        icon: 'üåà',
        category: 'mood',
        requirement: '5 –¥–Ω–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º 4+',
        progress: 0,
        target: 5,
        completed: false,
        rarity: 'epic',
      },

      // –°–µ—Ä–∏–∏
      {
        id: '12',
        title: '–ù–æ–≤–∏—á–æ–∫',
        description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥',
        icon: '‚≠ê',
        category: 'streak',
        requirement: '3 –¥–Ω—è –ø–æ–¥—Ä—è–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
        progress: 0,
        target: 3,
        completed: false,
        rarity: 'common',
      },
      {
        id: '13',
        title: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç',
        description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥',
        icon: 'üî•',
        category: 'streak',
        requirement: '30 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
        progress: 0,
        target: 30,
        completed: false,
        rarity: 'epic',
      },

      // –û–±—â–∏–µ
      {
        id: '14',
        title: '–ú—É–ª—å—Ç–∏—Ç–∞—Å–∫–µ—Ä',
        description: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ —Ç—Ä–µ–∫–µ—Ä—ã –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å',
        icon: 'üéØ',
        category: 'general',
        requirement: '–í–æ–¥–∞, —Å–æ–Ω, —Å–ø–æ—Ä—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞ –¥–µ–Ω—å',
        progress: 0,
        target: 4,
        completed: false,
        rarity: 'rare',
      },
      {
        id: '15',
        title: '–ú–∞—Å—Ç–µ—Ä –∑–¥–æ—Ä–æ–≤—å—è',
        description: '–ü–æ–ª—É—á–∏—Ç–µ –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
        icon: 'üëë',
        category: 'general',
        requirement: '–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è',
        progress: 0,
        target: 14,
        completed: false,
        rarity: 'legendary',
      },
    ];

    // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ (–∑–∞–≥–ª—É—à–∫–∞)
    const savedProgress = {}; // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    setAchievements(initialAchievements);
  }, []);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  const filteredAchievements = achievements.filter(achievement => {
    const matchesFilter = filter === 'all' || 
      (filter === 'completed' && achievement.completed) ||
      (filter === 'uncompleted' && !achievement.completed);
    
    const matchesCategory = categoryFilter === 'all' || achievement.category === categoryFilter;
    
    return matchesFilter && matchesCategory;
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ä–µ–¥–∫–æ—Å—Ç–∏
  const getRarityColor = (rarity: Achievement['rarity']) => {
    switch (rarity) {
      case 'common': return '#757575';
      case 'rare': return '#2196F3';
      case 'epic': return '#9C27B0';
      case 'legendary': return '#FF9800';
      default: return '#757575';
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const getCategoryIcon = (category: Achievement['category']) => {
    switch (category) {
      case 'water': return 'üíß';
      case 'sleep': return 'üò¥';
      case 'sport': return 'üí™';
      case 'mood': return 'üòä';
      case 'streak': return 'üî•';
      case 'general': return '‚≠ê';
      default: return '‚≠ê';
    }
  };

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
  const unlockAchievement = (id: string) => {
    setAchievements(prev => prev.map(ach => 
      ach.id === id 
        ? { ...ach, completed: true, dateCompleted: new Date() }
        : ach
    ));
    Alert.alert('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!', '–í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!');
  };

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const completedCount = achievements.filter(a => a.completed).length;
  const totalCount = achievements.length;
  const completionPercent = totalCount > 0 ? Math.round((completedCount / totalCount) * 100) : 0;

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollContent}>
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <View style={styles.header}>
          <Ionicons name="trophy" size={36} color="#FFD700" />
          <Text style={styles.title}>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</Text>
        </View>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
        <View style={styles.progressCard}>
          <Text style={styles.progressTitle}>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</Text>
          <View style={styles.progressRow}>
            <View style={styles.progressCircle}>
              <Text style={styles.progressPercent}>{completionPercent}%</Text>
            </View>
            <View style={styles.progressStats}>
              <Text style={styles.progressText}>
                <Text style={styles.progressNumber}>{completedCount}</Text> –∏–∑ <Text style={styles.progressNumber}>{totalCount}</Text>
              </Text>
              <Text style={styles.progressSubtext}>–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ</Text>
            </View>
          </View>
        </View>

        {/* –§–∏–ª—å—Ç—Ä—ã */}
        <View style={styles.filtersCard}>
          <Text style={styles.filtersTitle}>–§–∏–ª—å—Ç—Ä—ã</Text>
          
          <View style={styles.filterRow}>
            <Text style={styles.filterLabel}>–°—Ç–∞—Ç—É—Å:</Text>
            {(['all', 'completed', 'uncompleted'] as const).map(status => (
              <TouchableOpacity
                key={status}
                style={[
                  styles.filterButton,
                  filter === status && styles.filterButtonActive,
                ]}
                onPress={() => setFilter(status)}
              >
                <Text style={[
                  styles.filterButtonText,
                  filter === status && styles.filterButtonTextActive,
                ]}>
                  {status === 'all' ? '–í—Å–µ' : status === 'completed' ? '–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ' : '–ù–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ'}
                </Text>
              </TouchableOpacity>
            ))}
          </View>

          <View style={styles.filterRow}>
            <Text style={styles.filterLabel}>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</Text>
            <ScrollView horizontal showsHorizontalScrollIndicator={false}>
              <View style={styles.categoryFilters}>
                {(['all', 'water', 'sleep', 'sport', 'mood', 'streak', 'general'] as const).map(category => (
                  <TouchableOpacity
                    key={category}
                    style={[
                      styles.categoryButton,
                      categoryFilter === category && styles.categoryButtonActive,
                    ]}
                    onPress={() => setCategoryFilter(category)}
                  >
                    <Text style={[
                      styles.categoryButtonText,
                      categoryFilter === category && styles.categoryButtonTextActive,
                    ]}>
                      {category === 'all' ? '–í—Å–µ' : getCategoryIcon(category)}
                    </Text>
                  </TouchableOpacity>
                ))}
              </View>
            </ScrollView>
          </View>
        </View>

        {/* –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π */}
        <View style={styles.achievementsList}>
          {filteredAchievements.length === 0 ? (
            <Text style={styles.emptyText}>–ù–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º</Text>
          ) : (
            filteredAchievements.map(achievement => (
              <View
                key={achievement.id}
                style={[
                  styles.achievementCard,
                  achievement.completed && styles.achievementCardCompleted,
                  { borderLeftColor: getRarityColor(achievement.rarity) },
                ]}
              >
                <View style={styles.achievementHeader}>
                  <Text style={styles.achievementIcon}>{achievement.icon}</Text>
                  <View style={styles.achievementInfo}>
                    <Text style={styles.achievementTitle}>{achievement.title}</Text>
                    <Text style={styles.achievementDescription}>{achievement.description}</Text>
                    <View style={styles.achievementMeta}>
                      <Text style={styles.achievementRarity} style={{ color: getRarityColor(achievement.rarity) }}>
                        {achievement.rarity === 'common' ? '–û–±—ã—á–Ω–æ–µ' :
                         achievement.rarity === 'rare' ? '–†–µ–¥–∫–æ–µ' :
                         achievement.rarity === 'epic' ? '–≠–ø–∏—á–µ—Å–∫–æ–µ' : '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ'}
                      </Text>
                      <Text style={styles.achievementCategory}>
                        {getCategoryIcon(achievement.category)} {achievement.category}
                      </Text>
                    </View>
                  </View>
                  {achievement.completed ? (
                    <Ionicons name="checkmark-circle" size={32} color="#4CAF50" />
                  ) : (
                    <Ionicons name="lock-closed" size={32} color="#ccc" />
                  )}
                </View>

                <View style={styles.achievementProgress}>
                  <Text style={styles.achievementRequirement}>{achievement.requirement}</Text>
                  <View style={styles.progressBar}>
                    <View
                      style={[
                        styles.progressFill,
                        {
                          width: `${Math.min((achievement.progress / achievement.target) * 100, 100)}%`,
                          backgroundColor: getRarityColor(achievement.rarity),
                        },
                      ]}
                    />
                  </View>
                  <Text style={styles.progressText}>
                    {achievement.completed ? '–ü–æ–ª—É—á–µ–Ω–æ' : `${achievement.progress}/${achievement.target}`}
                  </Text>
                </View>

                {achievement.completed && achievement.dateCompleted && (
                  <Text style={styles.completionDate}>
                    –ü–æ–ª—É—á–µ–Ω–æ: {achievement.dateCompleted.toLocaleDateString('ru-RU')}
                  </Text>
                )}

                {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—É–±—Ä–∞—Ç—å –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ) */}
                {!achievement.completed && __DEV__ && (
                  <TouchableOpacity
                    style={styles.testButton}
                    onPress={() => unlockAchievement(achievement.id)}
                  >
                    <Text style={styles.testButtonText}>–¢–µ—Å—Ç: —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å</Text>
                  </TouchableOpacity>
                )}
              </View>
            ))
          )}
        </View>
      </ScrollView>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  scrollContent: {
    padding: 20,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
    marginBottom: 30,
    justifyContent: 'center',
  },
  title: {
    fontSize: 32,
    fontWeight: 'bold',
    color: '#333',
  },
  progressCard: {
    backgroundColor: '#fff',
    padding: 20,
    borderRadius: 20,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 3,
  },
  progressTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
    marginBottom: 15,
    textAlign: 'center',
  },
  progressRow: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 20,
  },
  progressCircle: {
    width: 80,
    height: 80,
    borderRadius: 40,
    backgroundColor: '#6200EE',
    justifyContent: 'center',
    alignItems: 'center',
  },
  progressPercent: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#fff',
  },
  progressStats: {
    flex: 1,
  },
  progressText: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
  },
  progressNumber: {
    color: '#6200EE',
  },
  progressSubtext: {
    fontSize: 14,
    color: '#666',
    marginTop: 4,
  },
  filtersCard: {
    backgroundColor: '#fff',
    padding: 20,
    borderRadius: 20,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 3,
  },
  filtersTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 15,
  },
  filterRow: {
    marginBottom: 15,
  },
  filterLabel: {
    fontSize: 14,
    fontWeight: '500',
    color: '#666',
    marginBottom: 8,
  },
  filterButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    backgroundColor: '#f0f0f0',
    marginRight: 8,
  },
  filterButtonActive: {
    backgroundColor: '#6200EE',
  },
  filterButtonText: {
    fontSize: 14,
    color: '#666',
  },
  filterButtonTextActive: {
    color: '#fff',
    fontWeight: '500',
  },
  categoryFilters: {
    flexDirection: 'row',
    gap: 8,
  },
  categoryButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 20,
    backgroundColor: '#f0f0f0',
  },
  categoryButtonActive: {
    backgroundColor: '#6200EE',
  },
  categoryButtonText: {
    fontSize: 16,
    color: '#666',
  },
  categoryButtonTextActive: {
    color: '#fff',
  },
  achievementsList: {
    marginBottom: 20,
  },
  emptyText: {
    textAlign: 'center',
    color: '#999',
    fontSize: 16,
    marginTop: 40,
  },
  achievementCard: {
    backgroundColor: '#fff',
    padding: 16,
    borderRadius: 16,
    marginBottom: 12,
    borderLeftWidth: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 2,
    elevation: 2,
  },
  achievementCardCompleted: {
    opacity: 0.9,
  },
  achievementHeader: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    gap: 12,
    marginBottom: 12,
  },
  achievementIcon: {
    fontSize: 40,
  },
  achievementInfo: {
    flex: 1,
  },
  achievementTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 4,
  },
  achievementDescription: {
    fontSize: 14,
    color: '#666',
    marginBottom: 8,
  },
  achievementMeta: {
    flexDirection: 'row',
    gap: 12,
  },
  achievementRarity: {
    fontSize: 12,
    fontWeight: '500',
  },
  achievementCategory: {
    fontSize: 12,
    color: '#999',
  },
  achievementProgress: {
    marginTop: 8,
  },
  achievementRequirement: {
    fontSize: 12,
    color: '#666',
    marginBottom: 8,
    fontStyle: 'italic',
  },
  progressBar: {
    height: 6,
    backgroundColor: '#f0f0f0',
    borderRadius: 3,
    marginBottom: 4,
    overflow: 'hidden',
  },
  progressFill: {
    height: '100%',
    borderRadius: 3,
  },
  completionDate: {
    fontSize: 12,
    color: '#4CAF50',
    marginTop: 8,
    fontStyle: 'italic',
  },
  testButton: {
    marginTop: 8,
    padding: 8,
    backgroundColor: '#ffeb3b',
    borderRadius: 8,
    alignSelf: 'flex-start',
  },
  testButtonText: {
    fontSize: 12,
    color: '#333',
    fontWeight: '500',
  },
});

export default Achievements;